// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    
// presetting values :
	// zeros; pass x|y to a multiplexor (mux) with 0 as the alternate
		Mux16(a=x,sel=zx,out=xzero);
		Mux16(a=y,sel=zy,out=yzero);

	// negatives; pass x|y and their negative into a multiplexor
		Not16(in=xzero,out=notx);
		Not16(in=yzero,out=noty);
		Mux16(a=xzero,b=notx,sel=nx,out=xpreset);
		Mux16(a=yzero,b=noty,sel=ny,out=ypreset);

// bit select operation f() = addition | bitwise AND
	
	// bitwise addition
		Add16(a=xpreset,b=ypreset,out=outaddition);
	
	// bitwise AND
		And16(a=xpreset, b=ypreset,out = outand);

	// mux both with the function selector
		Mux16(a=outand,b=outaddition,sel=f,out=PostOpOut);

// postsetting values
	// negative; pass out and negative out to mux
		Not16(in=PostOpOut, out = NegPostOpOut);
		
		//pull out first digit for negative test
		Mux16(a=PostOpOut, b=NegPostOpOut, sel=no, out=out, out[15]=negative, out[0..7] = first8, out[8..15] = last8);

// find if my final value is +/-/o
	// negative? check if the first bit == 0
		And(a=negative,b=true,out=ng);

	// zero? check if both bytes are zero and give the not result
		Or8Way(in=first8,out = firstHalfNonzero);
		Or8Way(in=last8,out = secondHalfNonzero);
		Or(a=firstHalfNonzero,b=secondHalfNonzero,out=zero);
		Not(in=zero,out=zr);		
		
}
