// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:

	// first - do we need to load a new value to the register?
		Or(a=load,b=inc,out=orCont1);
		Or(a=orCont1,b=reset,out=orControl);

	// take the increment of the current register value
		Inc16(in=regOut,out = incremented);

	// select increment or non-increment based on inc
		Mux16(a=regOut,b=incremented,sel=inc,out=incOut);

	// if load is true, regardless of the previous increment decision
	// set the register to our input value. Otherwise, loadOut is previous value
		Mux16(a=incOut,b=in, sel=load, out=loadOut);

	// if reset is true, output 0. Else, pass the previously computer value through	
		Mux16(a=loadOut, b=false, sel=reset, out = computedIn);

	// take desired value (inc, loaded or reset) and update the register
		Register(in=computedIn, load = orControl, out = regOut, out=out);
}
