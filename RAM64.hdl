// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	// first, we take our load bit and first 3-bit address and 
	//return 8 load values to their corresponding 8 reg RAM (e.g. [0,0,0,1,0,0,0,0])
		DMux8Way(in = load, sel = address[0..2], a=load0,b=load1,c=load2,d=load3,e=load4,f = load5, g=load6, h=load7);

	// pass through the loadvalues and second 3-bit address to our 8 reg RAM
		RAM8(in=in,load=load0,address=address[3..5],out=a);
		RAM8(in=in,load=load1,address=address[3..5],out=b);
		RAM8(in=in,load=load2,address=address[3..5],out=c);
		RAM8(in=in,load=load3,address=address[3..5],out=d);
		RAM8(in=in,load=load4,address=address[3..5],out=e);
		RAM8(in=in,load=load5,address=address[3..5],out=f);
		RAM8(in=in,load=load6,address=address[3..5],out=g);
		RAM8(in=in,load=load7,address=address[3..5],out=h);

	//output the correct value based on the address, using the values passed out of out 8 reg RAM units
		Mux8Way16(sel = address[0..2], a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h,out = out);
}