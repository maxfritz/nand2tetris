// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
	// first, we take our load bit and address and return 8 load values to their corresponding registers (e.g. [0,0,0,1,0,0,0,0])
		DMux8Way(in = load, sel = address, a=load0,b=load1,c=load2,d=load3,e=load4,f = load5, g=load6, h=load7);

	// memory of 8 registers; the input value is thrown at all registers, and loads (or does not) to the correctly addressed register
	// as decided by the load value passed from the demux. The output of all registers is sent to a multiplexor which decides the value to output
		Register(in = in, load = load0, out = a);
		Register(in = in, load = load1, out = b);
		Register(in = in, load = load2, out = c);
		Register(in = in, load = load3, out = d);
		Register(in = in, load = load4, out = e);
		Register(in = in, load = load5, out = f);
		Register(in = in, load = load6, out = g);
		Register(in = in, load = load7, out = h);

	// deciding which value to output, given all register contents and the currently selected address
		Mux8Way16(sel = address, a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h,out = out);


}